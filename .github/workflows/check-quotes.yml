name: Check Quotes

on:
  pull_request:
  push:
    branches-ignore:
      - gh-pages
    paths:
      - 'public/quotes.txt'

jobs:
  check-duplicates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for duplicate lines in quotes.txt
        run: |
          if [ -f public/quotes.txt ]; then
            echo -e "\033[1;34mAnalyzing public/quotes.txt for duplicates...\033[0m"
            duplicates=$(sort public/quotes.txt | uniq -d)
            if [ -n "$duplicates" ]; then
              echo -e "\033[1;31mDuplicate lines found in public/quotes.txt.\033[0m"
              echo -e "\033[1;33mSummary of duplicates:\033[0m"
              echo "$duplicates"
              echo
              echo -e "\033[1;36mDetails of duplicate lines with line numbers and occurrences:\033[0m"
              awk '{count[$0]++; lines[$0]=lines[$0] ? lines[$0]", "NR : NR} END {for (line in count) if (count[line] > 1) printf "\033[1;31m%d occurrences\033[0m: Line(s) \033[1;33m%s\033[0m -> \033[1;36m%s\033[0m\n", count[line], lines[line], line}' public/quotes.txt | sort -u
              exit 1
            else
              echo -e "\033[1;32mNo duplicate lines found in public/quotes.txt.\033[0m"
            fi
          else
            echo -e "\033[1;33mFile public/quotes.txt not found. Skipping check.\033[0m"
          fi

      - name: Check for whitespace issues in quotes.txt
        env:
          TERM: xterm-256color
        run: |
          python3 <<EOF
          file_path = 'public/quotes.txt'

          try:
              with open(file_path, 'r') as file:
                  lines = file.readlines()
          except FileNotFoundError:
              print("\033[1;33mFile public/quotes.txt not found. Skipping check.\033[0m")
              exit(0)
          
          print("\033[1;34mAnalyzing public/quotes.txt for whitespace issues...\033[0m")
          
          whitespace_issues = []
          for i, line in enumerate(lines, start=1):
              stripped_line = line.rstrip('\n')  # Remove only the newline character for analysis
              if stripped_line.startswith(" ") or stripped_line.endswith(" "):
                  leading_spaces = len(stripped_line) - len(stripped_line.lstrip(' '))
                  trailing_spaces = len(stripped_line) - len(stripped_line.rstrip(' '))
                  highlighted_line = stripped_line
                  if leading_spaces > 0:
                      highlighted_line = f"\033[1;41;31m{'.' * leading_spaces}\033[0m" + highlighted_line.lstrip()
                  if trailing_spaces > 0:
                      highlighted_line = highlighted_line.rstrip() + f"\033[1;41;31m{'.' * trailing_spaces}\033[0m"
                  whitespace_issues.append((i, highlighted_line))

          if whitespace_issues:
              print("\033[1;31mWhitespace issues found in public/quotes.txt.\033[0m")
              print("\033[1;33mLines with leading or trailing whitespace:\033[0m")
              for line_num, content in whitespace_issues:
                  print(f"Line {line_num}: \"{content}\"")
              exit(1)
          else:
              print("\033[1;32mNo whitespace issues found in public/quotes.txt.\033[0m")
          EOF

